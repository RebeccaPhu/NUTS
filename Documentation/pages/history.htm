<p>Like many things, NUTS started out as an idea, and one in a kind of protest. The problem with many of the existing tools of the time (around 2011), and indeed many of the tools still around today, is the presumption that the best operation is to 'open' a file system, and then 'import' or 'export' files from it. There are a few problems with this paradigm: Firstly, it presumes that everything want to shift in or out of the filesystem is arbitrarily a DOS/Windows file of some kind. Secondly, it treats the file system as a file to be manipulated as a whole, rather than simply a file system containining files; as if the disk image is a document that requires editing, rather than a living collection of files.</p>

<p>It occurred to me that what is actually required is an intuitive system that works more like Windows Explorer: a browseable system where files can be copied from one location to the other. I had considered doing just that, making (what would eventually become) NUTS essentially a Windows Explorer clone that could handle disk images. However, this approach brings its own issues. Inter-process communication is tricky at the best of times, and adding files of unknown types going between file systems and having to transfer memory blocks became icky. Instead, I borrowed a pattern from another class of programs: the FTP client.</p>

<p>FTP clients use a simple two-pane structure: typically, the left-hand pane is the 'local' file system, and the right-hand pane is the 'remote'. Files can be transferred in either direction by simply saying 'copy this'. Context matters here, but is intuitive: if you copy from the remote, you download to the local. Conversely, if you copy from the local, you uplaod to the remote.</p>

<p>NUTS uses a similar pattern, but both panes are 'local'. This provides a means to manipulate files from one place to another, without the troublesome problems of processes talking to each other.</p>

<p>The original NUTS looked quite different to the current application. Originally, NUTS started as a way to copy BBC Micro files from DFS disk images to an ADFS hard disk image. Soon it became clear that the way NUTS works lent itself to other similar formats. I had recently built an IECATA board for my C64, and found that adding the IECATA and C64 filesystems helped there too.</p>

<p>It was at this point that I decided NUTS should be more generic: the main program should not care what a file is or where it comes from, and should defer to a plugin system to provide a generic interface to the file, and provide the means to read and write files without knowing what a file looks like.</p>

<p>As the original program was designed with Acorn file types in mind, NUTS is something of a backronym, NUTS referring to Acorns. From this 'Native Universal Transfer System' was coined. 'Native' refers to the fact that NUTS handles files natively, without having to go through tedious import/export processes and storing metadata in separate files. Universal refers to the fact there is no limitation on source vs destination. If you want to copy a BBC BASIC program onto a D64 disk image, you can do that. The Commodore plugin might not quite know what to do with it, but it will record the file in the D64 for you.</p>

<p>The original program also used exclusively Risc OS icons, another nod to its Acorn roots. This felt problematic for a couple of reasons. First of all, while it made sense when NUTS was exclusively Acorn, using a Risc OS BASIC icon for a program on a D64 seemed out of place. Secondly, it would be quesitonable in terms of copyright. NUTS uses a legal grey area here: for Risc OS filesystems, it is fair to use Risc OS icons, as this provides a familiar interface - what you see in NUTS is how it would look on a Risc OS machine (prior to Risc OS 4). I claim this as 'fair use for the purposes of familiarity', and thus feel it is legal here. But to use Risc OS icons for everything would be highly stretching that claim.</p>

<p>Subsequent versions thus used open-source royalty-free icons from the internet. However, for that familiarity feel, NUTS employs a 'resolved icons' API, that means plugins can supply their own icons for representing known file types. The Acorn plugin uses this for the Risc OS file systems.</p>

<p>The sidebar that appears in both panes was a late addition, having originally been implemented as part of the pane's title bar when there was only 5 icons. These icon buttons were poor, being 1-bit bitmaps at very low resolution. The new sidebar not only uses proper higher-resolution colour icons, but it includes descriptions of their functions to make them more intuitive. At the same time, the 'topic icon' shown at the top of the sidebar was added.</p>

<p>The plugin system appeared early 2020, after a number of years of non-development. The special-cases that were embedded in the main program were removed, and APIs developed to replace them. Now the main NUTS program knows nothing about things like access modes, load addresses, etc. These are filesystem-specific, so they are part of the attribute system.</p>

<p>Originally, NUTS used a 'BBCFile' structure, that indicated the particulars of a file. This was very Acorn-centric, and became problematic as new filesystems were added. It also presumed the filename was 'basically ASCII', in order to be renderable using a Windows font. With the introduction of D64s and PETSCII-encoded characters, this became even more of a problem, with characters being lost in translation (somewhat literally). To fix this, the system of fonts and encodings was introduced, with filenames, etc. being rendered in 8x8 bitmap fonts. The concept of 'Filesystem File Type' was also introduced, identifying the kind of system the file originated from. This allows receiving filesystems to see if the file being written is something it can understand and process properly. If not, the receiving filesystem makes a 'best effort' at storing the file. For example, the Sinclair plugin records unknown foreign files as 'Bytes:' files loading at address 16384 (4000 hex).</p>

<p>NUTS has grown to be a very versatile tool, with support for a number of different filesystems, including CP/M based systems. It is my hope that other developers with an interest in retro systems will develop additional plugins for NUTS, and make NUTS the de-facto go-to filesystem manipulator tool.</p>

<p>Rebecca Gellman, April 2022</p>
